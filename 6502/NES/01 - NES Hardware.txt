NES HARDWARE + PPU
==================

Now that you (somewhat) know how to understand 6502 code, let's go over the NES's hardware.

This will describe the address and function of the NES hardware registers.
Yes, how the system actually works. The real NES. That one.

First is address space. The NES has three data processors inside two chips. The PPU is one chip, and the CPU/APU is another.

The PPU (Picture processing Unit) puts video to the screen.
The APU (Audio Processing Unit) makes the music and sound effects.
The CPU (Running the game cartridge's code) runs the game video and audio by talking to both of them.

The CPU and PPU have their own memory "pools" or address areas. Both have 16 bits of address space.

The CPU has 2KB of RAM inside the console, and uses the ROM provided by the cartridge for the program.

The PPU has 2KB of RAM inside the console, and uses a different ROM provided by the cartridge for the graphics on its own bus separate from the CPU.

The bus diagram looks like:

    [RAM]   [RAM]
      ^       ^
    [CPU]<->[PPU]
      v       v
    [ROM]   [ROM]


The only was for the CPU to read/write the PPU RAM/ROM is through special PPU registers, which we are getting to in the next lesson.

This is how the game puts graphics on the screen, is calculating them on the CPU and putting them to the PPU.

The NES's address map looks like:

    $0000 to $07FF - System RAM inside the NES. Mirrored from $0800 to $1FFF.
        E.g. $800 is actually $000, $801 = $001, etc.

    $2000 to $2007 - PPU Registers. Mirrored until $3FFF.

    $4000 to $4017 - APU Registers. Mirrored until $5FFF.

    $6000 to $7FFF - [OPTIONAL] 8KB Extra RAM on cartridge. Can be battery backed up. Games like Zelda save their data here.

    $8000 to $FFFF - Game cartridge code. The game runs in this area, accessing all other areas.

Note that most cartridges do NOT have RAM at $6000. But some games, like Super Mario Bros 3 do, even though it's not battery backed up. It's actually used to store the terrain destruction during the course of a level.

Below is the PPU memory map. Remember that the PPU talks to the CPU through special registers we'll go over in the next lesson, but the PPU is an independent machine with its own ROM and RAM!

PPU address map:

    $0000 to $0FFF - Graphics table 0. Located on game cart ROM.

    $1000 to $1FFF - Graphics table 1. Located on game cart ROM.

    $2000 to $2FFF - "Nametables", aka the screen background data.

    $3F00 to $3F0F - Background PPU color palette.

    $3F10 to $3F1F - Sprite PPU color palette.

    $4000 to $FFFF = Mirrored from $0000 to $3FFF.

One important note is that the Nametables space is a 4KB range of data, but only actually contains a 2KB RAM on the NES.

The nametables internally are aligned like so:

     (0,0)     (256,0)     (511,0)
       +-----------+-----------+
       |           |           |
       |           |           |
       |   $2000   |   $2400   |
       |           |           |
       |           |           |
(0,240)+-----------+-----------+(511,240)
       |           |           |
       |           |           |
       |   $2800   |   $2C00   |
       |           |           |
       |           |           |
       +-----------+-----------+
     (0,479)   (256,479)   (511,479)


Because of the half-sized RAM, you have to mirror two of the name tables, either mirroring left to right, or up to down. This is called horizontal or vertical mirroring.

The reason why the names are backwards is because the mirror needs to be the opposite of the intended scroll direction.

E.g. Super Mario Bros has to scroll left and right, so the game uses vertical mirroring, meaning $2000 and $2400 are the 1KB slices of the 2KB of screen RAM.

