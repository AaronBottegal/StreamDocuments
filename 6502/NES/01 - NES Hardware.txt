NES HARDWARE + PPU
==================

Now that you (somewhat) know how to understand 6502 code, let's go over the NES's hardware.

This will describe the address and function of the NES hardware registers.
Yes, how the system actually works. The real NES. That one.

First is address space. The NES has three data processors inside two chips. The PPU is one chip, and the CPU/APU is another.

The PPU (Picture processing Unit) puts video to the screen.
The APU (Audio Processing Unit) makes the music and sound effects.
The CPU (Running the game cartridge's code) runs the game video and audio by talking to both of them.

The CPU and PPU have their own memory "pools" or address areas. Both have 16 bits of address space.

The CPU has 2KB of RAM inside the console, and uses the ROM provided by the cartridge for the program.

The PPU has 2KB of RAM inside the console, and uses a different ROM provided by the cartridge for the graphics on its own bus separate from the CPU.

The bus diagram looks like:

    [RAM]   [RAM]
      ^       ^
    [CPU]<->[PPU]
      v       v
    [ROM]   [ROM]


The only was for the CPU to read/write the PPU RAM/ROM is through special PPU registers, which we are getting to shortly.

CPU chip address map:
    $0000 to $07FF - System RAM inside the NES. Mirrored from $0800 to $1FFF.
        E.g. $800 is actually $000, $801 = $001, etc.
    $2000 to $2007 - PPU Registers. Mirrored until $3FFF.
    $4000 to $4017 - APU Registers. Mirrored until $5FFF.
    $6000 to $7FFF - 8KB Extra RAM on cartridge. Can be battery backed up. Games like Zelda save their data here.
    $8000 to $FFFF - Game cartridge code. The game runs in this area, accessing all other areas.

PPU chip address map:
    $0000 to $0FFF - Graphics table 0. Can be used for sprites or BG. On game cart ROM.
    $1000 to $1FFF - Graphics table 1. Can be used for sprites or BG. On game cart ROM.
    $2000 to $27FF - "Nametables", aka the screen. Inside the NES, but can be expanded.
        *This is where the mirroring solder joint on early carts came from. Having to pick scrolling direction per-game in hardware.
    $3F00 to $3F0F - Background PPU color palette. $3F00 is the universal background color value. Allows to choose from four sets of three colors additional.
        E.g. $3F00 = Background, $3F01 = BG0 Color 0, $3F05 = BG1 Color 1, $3F0F = BG3 color 3, etc.
    $3F10 to $3F1F - Sprite PPU color palette. Background pixel value bits 00 are transparent. Choice of four sets of three colors each.
        E.g. $3F10 = Background color mirror. $3F11 = Sprite 0 Color 1, $3F14 = No color as is transparent, $3F15 = Sprite 1 Color 1, etc.
    $4000 to $FFFF = Mirrored from $0000 to $3FFF.

PPU Registers: (Write)
    PPU_CTRL     $2000   VPHB SINN   NMI enable (V), PPU master/slave (P), sprite height (H), background tile select (B), sprite tile select (S), increment mode (I), nametable select (NN)
    PPU_MASK     $2001   BGRS bCcG   color emphasis (BGR), sprite enable (S), background enable (b), sprite left column enable (C), background left column enable (c), greyscale (G)
    PPU_STATUS   $2002   VSO- ----   vblank (V), sprite 0 hit (S), sprite overflow (O); Reading resets write index for $2005/$2006.
    OAM_ADDR     $2003   AAAA AAAA   Sprite read/write address.
    OAM_DATA     $2004   DDDD DDDD   Sprite data read/write. NOTE: Unreliable to read.
    PPU_SCROLL   $2005   XXXX XXXX   fine scroll position. (two writes: X scroll, Y scroll)
    PPU_ADDR     $2006   AAAA AAAA   PPU read/write address. (two writes: most significant byte, least significant byte)
    PPU_DATA     $2007   DDDD DDDD   PPU data read/write to address written to PPU_ADDR in PPU address space.
    OAM_DMA      $4014   AAAA AAAA   Sprite DMA high address.

NOTE: Some features were used on the arcade hardware but not the NES. We ignore them. (E.g. PPU Master/Slave for two PPU's.)
This PPU RAM is where  the game screens are stored. The game ROM is where the graphics are kept.
The CPU isn't hooked to the PPU memory, so it can't actually change it. To put data inside the PPU memory, you must
    assign the PPU_ADDR the location, and write the data to the PPU_DATA register.
    *Note: This is how you upload palettes. To write #$30 (White) to the universal background color, you have to
    store #$3F to PPU_ADDR, #$00 to PPU_ADDR, and finally write #$30 to PPU_DATA. THis puts it in the PPU memory area.
    Note: This is how you "upload" all necessary data from the CPU to your PPU to make the game screen.
Sprites work slightly different, which will be discussed in another text file.
Note: It is only safe to write to the PPU_Data, PPU_Scroll, Sprite data, etc. if rendering is off or in vblank.
    Otherwise, the PPU will ignore/corrupt your data! NMI (Vblank) is the only safe time to write and read PPU registers.