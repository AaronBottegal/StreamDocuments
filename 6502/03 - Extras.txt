    Processor status bits:
        7  bit  0
        ---- ----
        NVss DIZC
        |||| ||||
        |||| |||+- Carry status.
        |||| ||+-- Zero status.
        |||| |+--- Interrupt Disable.
        |||| +---- Decimal Flag (Unused on the NES.)
        ||++------ No CPU effect, see: the B flag
        |+-------- Overflow status.
        +--------- Negative status

CPU Stack:
    The stack is an 8-bit register (S) that is used to store temporary information.
    The stack range is $0100 to $01FF, or $01SS. SS is the 8-bit stack value.
    The stack moves DOWN when information is put onto it.
        Because of this, you usually start the stack at #$FF, or $01FF.
    The stack is how JSR's work. JSR puts the next instruction ahead of the JSR onto the stack.
        When an RTS instruction is ran, the location that was JSR'd from gets returned to by pulling off the stack.
    You can push and pull values from the A register on to/off of the stack.
        This can save variable space and ROM because pushing and pulling A is a one byte instruction.
        But PHA/PLA isn't ever the fastest option. Zeropage stores are more ROM, but are faster. Always a tradeoff.
        (The smallest store (zeropage store.) is 2 bytes, which is how it still saves ROM space.)