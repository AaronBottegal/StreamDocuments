Bitwise operators:
==================

Any questions about anything, ask in chat!

When working with values representing binary, we have certain operations we do per-bit:

Bitwise AND (&): If both bits are 1, output is 1.
0 & 0 = 0
0 & 1 = 0
1 & 0 = 0
1 & 1 = 1

Bitwise OR (|): If either bit is 1, output is 1.
0 | 0 = 0
0 | 1 = 1
1 | 0 = 1
1 | 1 = 1

Bitwise NOT (^): If either (But not both) are 1, output is 1.
0 ^ 0 = 0
0 ^ 1 = 1
1 ^ 0 = 1
1 ^ 1 = 0

Bitwise EOR (Exclusive OR, sometimes called XOR): Same as Bitwise NOT.
0 ^ 0 = 0
0 ^ 1 = 1
1 ^ 0 = 1
1 ^ 1 = 0

These operations usually work across the entire data you're working on:
E.g. %1010 | %0001 = %1011

You can also move all bits to another spot in a value, this is called shifting, rolling, or rotating.

It is denoted by << (Left Shift) and >> (Right shift)
E.g. 10100010 >> 1 turns into 01010001
E.g. 01010001 << 1 turns into 10100010

When we get into specific processors, there will also be different versions on each.
E.g. Bringing in 0, or bringing in the last bit shifted off from another operation.
